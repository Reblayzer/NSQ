db.posts.insertOne(
  
// In the `orders` collection
{
  _id: ObjectId("order123"),
  customer_id: ObjectId("customer456"),  // Reference to customers collection
  order_date: ISODate("2025-06-14T10:00:00Z"),
  total_price: NumberDecimal("39.98"),
  order_details: [/* ... */]
},


// In the `books` collection
{
  isbn: "9781234567890",
  title: "Distributed Systems",
  authors: [ObjectId("auth1"), ObjectId("auth2")],  // Many-to-Many link
  page_count: 400,
  genres: ["Computer Science"],
  categories: ["Education"],
  price: NumberDecimal("29.99")
},


{
  "_id": ObjectId("post1"),
  "title": "Using MongoDB Design Patterns",
  "content": "Let's learn the subset pattern!",
  "recent_comments": [
    {
      "user": "Alice",
      "comment": "Great post!",
      "date": "2025-06-14T12:00:00Z"
    },
    {
      "user": "Bob",
      "comment": "Very helpful, thanks!",
      "date": "2025-06-14T12:30:00Z"
    }
  ],
  "comment_count": 187
},



{ name: "John Doe",
  "mobile phone": "2885 6543",
  "work phone": "8755 1234",
  "land line": "7525 9137"
}


);


const session = client.startSession();
session.startTransaction();
try {
  // any number of insertOne / updateOne calls with { session }
  await session.commitTransaction();
} catch {
  await session.abortTransaction();
} finally {
  session.endSession();
}


db.books.aggregate([
  { 
    $match: { title: { $regex: "Dune", $options: "i" } } 
  },
  { 
    $lookup: {
      from:     "authors",
      localField:  "authors",
      foreignField: "_id",
      as:          "author_docs"
    }
  },
  { $project: { title:1, "author_docs.name":1 } }
]);


db.posts.insertOne(


{
  _id: ObjectId("…"),
  customer_id: ObjectId("…"),
  order_date:  ISODate("2025-06-15T…"),
  total_price: NumberDecimal("24.98"),
  order_details: [                         // ← embedded array
    { book_copy_id: ObjectId("…"), quantity:1, subtotal_price:NumberDecimal("9.99") },
    { book_copy_id: ObjectId("…"), quantity:1, subtotal_price:NumberDecimal("14.99") }
  ]
}

);



db.orders.aggregate([
  { $group: { 
      _id: "$customer_id", 
      total_spent: { $sum: "$total_price" } 
    } 
  },
  { $sort: { total_spent: -1 } },
  { 
    $lookup: {
      from:         "customers",
      localField:   "_id",
      foreignField: "_id",
      as:           "customer"
    }
  },
  { $unwind: "$customer" },
  { 
    $project: { 
      _id: 0, 
      name: "$customer.name", 
      spent: "$total_spent" 
    } 
  }
]);



db.inventory.aggregate([
  { 
    $match: { 
      status: "A",           // only items In Stock 
      qty:    { $lt: 30 }    // with quantity < 30 
    } 
  }
]);



db.books.aggregate([
  { 
    $project: {
      _id:    0,             // hide _id
      title:  1,             // include title
      isbn:   1,             // include isbn
      pages_k: {             // compute pages in thousands
        $divide: ["$page_count", 1000]
      }
    }
  }
]);



db.bookstore.aggregate([
  { 
    $unwind: "$categories"  // one output doc per category
  }
]);





db.orders.aggregate([
  { 
    $group: {
      _id: "$customer_id",           // group by customer
      totalSpent: { $sum: "$amount" },  // sum up their orders
      orderCount: { $sum: 1 }           // count their orders
    }
  }
]);




db.orders.aggregate([
  {
    $lookup: {
      from:         "customers",    // collection to join
      localField:   "cust_id",      // in orders
      foreignField: "_id",          // in customers
      as:           "cust_info"     // output array
    }
  },
  { $unwind: "$cust_info" }         // one order → one customer
]);


db.employees.aggregate([
  {
    $graphLookup: {
      from:             "employees",     // same coll’n
      startWith:        "$manager_id",   // initial link
      connectFromField: "manager_id",    // each level’s link field
      connectToField:   "_id",           // match against _id
      as:               "chain",         // output array
      depthField:       "level"          // recursion depth
    }
  }
]);





db.books.find(
  { authors: ObjectId("…") },
  { _id: 0, title: 1, isbn: 1 }
);

db.books.aggregate(
  [
    { $match:   { authors: ObjectId("…") } },
    { $project: { _id: 0, title: 1, isbn: 1 } }
  ]
);
              


exports = async function (changeEvent) {
  try {
    const orderLogCollection = context.services
      .get("NSQ")
      .db("assignment2")
      .collection("orderLog");

    if (changeEvent.operationType === "insert") {
      await orderLogCollection.insertOne({
        inserted: changeEvent.fullDocument,
      });
    } else if (changeEvent.operationType === "update") {
      await orderLogCollection.insertOne({
        updated: changeEvent.fullDocument,
        updateDescription: changeEvent.updateDescription,
      });
    }

    return { success: true };
  } catch (error) {
    console.error("Error in trigger function:", error);
    return { success: false, error: error.message };
  }
  
};






// Within a transaction: build and insert the order document
await client.db('assignment2')
  .collection('orders')
  .insertOne(orderDocument, { session });



// Fetch a specific book copy by its _id
const bookCopy = await client.db('assignment2')
  .collection('book_copies')
  .findOne(
    { _id: bookCopyId },
    { session }
  );




// Change a customer’s address
await client.db('assignment2')
  .collection('customers')
  .updateOne(
    { _id: new ObjectId(customerId) },
    { $set: { address: newAddress } }
  );




// Add an author to a book’s authors array
await client.db('assignment2')
  .collection('books')
  .updateOne(
    { _id: new ObjectId(bookId) },
    { $push: { authors: new ObjectId(authorId) } }
  );




  // Remove the retired category document
await client.db('assignment2')
  .collection('categories')
  .deleteOne(
    { name: categoryName },
    { session }
  );




  