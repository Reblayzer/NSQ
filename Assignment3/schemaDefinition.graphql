# Type Definitions
type Author @node(labels: ["Author"]) {
  id: ID! @id
  name: String!
  books: [Book!]! @relationship(type: "WRITTEN_BY", direction: IN)
}

type Character @node(labels: ["Character"]) {
  id: ID! @id
  name: String!
  books: [Book!]! @relationship(type: "HAS_CHARACTER", direction: IN)
}

type Category @node(labels: ["Category"]) {
  id: ID! @id
  name: String!
  books: [Book!]! @relationship(type: "BELONGS_TO", direction: IN)
  parentCategory: [Category!]!
    @relationship(type: "SUBCATEGORY_OF", direction: OUT)
  subcategories: [Category!]!
    @relationship(type: "SUBCATEGORY_OF", direction: IN)
}

type Book @node(labels: ["Book"]) {
  id: ID! @id
  isbn: String!
  title: String!
  page_count: Int!
  rating: Float!
  genres: [String!]!
  categories: [Category!]! @relationship(type: "BELONGS_TO", direction: OUT)
  characters: [Character!]! @relationship(type: "HAS_CHARACTER", direction: OUT)
  authors: [Author!]! @relationship(type: "WRITTEN_BY", direction: OUT)
  copies: [BookCopy!]! @relationship(type: "OF", direction: IN)
}

type BookCopy @node(labels: ["BookCopy"]) {
  id: ID! @id
  isbn: String!
  price: Float!
  type: String!
  book: [Book!]! @relationship(type: "OF", direction: OUT)
  orders: [Order!]!
    @relationship(type: "CONTAINS", direction: IN, properties: "ContainsRel")
}

type Customer @node(labels: ["Customer"]) {
  id: ID! @id
  name: String!
  email: String!
  address: String!
  orders: [Order!]! @relationship(type: "PLACED", direction: OUT)
}

type Order @node(labels: ["Order"]) {
  id: ID! @id
  order_date: Date!
  total_price: Float!
  customer: Customer! @relationship(type: "PLACED", direction: IN)
  book_copies: [BookCopy!]!
    @relationship(type: "CONTAINS", direction: OUT, properties: "ContainsRel")
}

type ContainsRel @relationshipProperties {
  quantity: Int!
  subtotal_price: Float!
}

input OrderItemInput {
  bookCopyId: ID!
  quantity: Int!
  subtotalPrice: Float!
}
# Queries

type Query {
  searchBooks(searchTerm: String!): [Book!]!
    @cypher(
      statement: """
      MATCH (b:Book)
      OPTIONAL MATCH (b)-[:WRITTEN_BY]->(a:Author)
      WHERE b.title CONTAINS $searchTerm OR a.name CONTAINS $searchTerm
      RETURN DISTINCT b
      """
      columnName: "b"
    )

  ordersByCustomerAndGenre(customerEmail: String!, genre: String!): [Order!]!
    @cypher(
      statement: """
      MATCH (c:Customer {email:$customerEmail})-[:PLACED]->(o:Order)
      MATCH (o)-[:CONTAINS]->(bc:BookCopy)-[:OF]->(b:Book)-[:BELONGS_TO]->(cat:Category)
      WHERE cat.name = $genre
      RETURN DISTINCT o
      """
      columnName: "o"
    )

  booksInCategory(categoryName: String!): [Book!]!
    @cypher(
      statement: """
      MATCH (b:Book)-[:BELONGS_TO]->(c:Category)
      WHERE (c)-[:SUBCATEGORY_OF*0..]->(:Category {name:$categoryName})
      RETURN DISTINCT b
      """
      columnName: "b"
    )
}

"""
# Querries on apollo

query {
  searchBooks(searchTerm: "Galactic") {
    isbn
    title
    authors {
      name
    }
  }
}

query {
  ordersByCustomerAndGenre(
    customerEmail: "alice@example.com",
    genre: "Science Fiction"
  ) {
    id
    order_date
    total_price
    book_copies {
      id
      isbn
      type
      price
    }
  }
}

query BooksInCategory($cat: String!) {
  booksInCategory(categoryName: $cat) {
    isbn
    title
    page_count
    rating
    authors { name }
    categories { name }
  }
}
Variables
{
	"cat": "Fiction"
}

# Mutations on Apollo

mutation {
  createOrderSingleBook(
    customerEmail: "alice@example.com",
    bookCopyId:    "‹PUT-A-REAL-BookCopy.id-HERE›",
    price:         22.0
  ) {
    id
    order_date
    total_price
    book_copies {
      id
      isbn
      type
      price
    }
  }
}

mutation {
  createOrderMultipleBooks(
    customerEmail: "alice@example.com",
    items: [
      { bookCopyId: "‹BookCopy.id-for-Paperback›", quantity: 2, subtotalPrice: 40.0 }
      { bookCopyId: "‹BookCopy.id-for-E-book›",     quantity: 1, subtotalPrice:  8.0 }
    ],
    totalPrice: 48.0
  ) {
    id
    order_date
    total_price
    book_copies {
      id
      isbn
      type
      price
    }
  }
}

mutation {
  applyDiscountToBooksByAuthor(
    authorName: "Author 2",
    percentage: 10.0
  ) {
    isbn
    title
    rating
  }
}
"""
type Mutation {
  createOrderSingleBook(
    customerEmail: String!
    bookCopyId: ID!
    price: Float!
  ): Order
    @cypher(
      statement: """
      MATCH (c:Customer {email:$customerEmail})
      MATCH (bc:BookCopy {id:$bookCopyId})
      CREATE (o:Order {
        id:            randomUUID(),
        order_date:    date(),
        total_price:   $price
      })
      CREATE (c)-[:PLACED]->(o)
      CREATE (o)-[:CONTAINS {
        quantity:       1,
        subtotal_price: $price
      }]->(bc)
      RETURN o
      """
      columnName: "o"
    )

  createOrderMultipleBooks(
    customerEmail: String!
    items: [OrderItemInput!]!
    totalPrice: Float!
  ): Order
    @cypher(
      statement: """
      MATCH (c:Customer {email:$customerEmail})
      CREATE (o:Order {
        id:            randomUUID(),
        order_date:    date(),
        total_price:   $totalPrice
      })
      CREATE (c)-[:PLACED]->(o)
      WITH o
      UNWIND $items AS item
      MATCH (bc:BookCopy {id:item.bookCopyId})
      CREATE (o)-[:CONTAINS {
        quantity:       item.quantity,
        subtotal_price: item.subtotalPrice
      }]->(bc)
      RETURN o
      """
      columnName: "o"
    )

  applyDiscountToBooksByAuthor(
    authorName: String!
    percentage: Float!
  ): [Book!]!
    @cypher(
      statement: """
      MATCH (a:Author {name:$authorName})-[:WRITTEN_BY]->(b:Book)
      SET b.rating = b.rating * (1 - $percentage/100)
      RETURN b
      """
      columnName: "b"
    )
}
